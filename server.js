const express = require('express');
const RSSParser = require('rss-parser');
const axios = require('axios');
const cors = require('cors');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã
const TelegramParser = require('./telegramParser'); // –°—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä –∫–∞–∫ fallback
const TelegramBotParser = require('./TelegramBotParser'); // –ù–æ–≤—ã–π Bot API –ø–∞—Ä—Å–µ—Ä

const app = express();
const parser = new RSSParser();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

// –ö—ç—à –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
let newsCache = [];
let lastUpdated = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã —Å fallback –ª–æ–≥–∏–∫–æ–π
let telegramParser;
let usingBotAPI = false;

async function initializeTelegramParsers() {
    console.log('\n=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM –ü–ê–†–°–ï–†–û–í ===');

    // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Bot API –ø–∞—Ä—Å–µ—Ä
    if (process.env.TELEGRAM_BOT_TOKEN) {
        try {
            telegramParser = new TelegramBotParser();

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bot API
            const testResponse = await axios.get(
                `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`,
                { timeout: 5000 }
            );

            if (testResponse.data && testResponse.data.ok) {
                console.log('‚úÖ Telegram Bot API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                console.log(`Bot: ${testResponse.data.result.first_name} (@${testResponse.data.result.username})`);
                usingBotAPI = true;
                return;
            }
        } catch (error) {
            console.log('‚ùå Telegram Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }
    } else {
        console.log('‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ –ø–∞—Ä—Å–µ—Ä (fallback)');
    telegramParser = new TelegramParser();
    usingBotAPI = false;
    console.log('=========================================\n');
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (—Ñ—É–Ω–∫—Ü–∏–∏ RSS –ø–∞—Ä—Å–∏–Ω–≥–∞, endpoints –∏ —Ç.–¥.) - —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ

// –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)
const sources = [
    {
        id: 'vremyan',
        name: '–í—Ä–µ–º—è –ù',
        url: 'https://www.vremyan.ru/rss/news.rss',
        type: 'RSS',
        baseUrl: 'https://www.vremyan.ru'
    },
    {
        id: 'niann',
        name: '–ù–ò–ê "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"',
        url: 'https://www.niann.ru/rss.xml',
        type: 'RSS',
        baseUrl: 'https://www.niann.ru'
    },
    {
        id: 'nta_pfo',
        name: '–ù–¢–ê –ü—Ä–∏–≤–æ–ª–∂—å–µ',
        url: 'https://nta-pfo.ru/rss/',
        type: 'RSS',
        baseUrl: 'https://nta-pfo.ru'
    },
    {
        id: 'vgoroden',
        name: '–í –≥–æ—Ä–æ–¥–µ N',
        url: 'https://www.vgoroden.ru/rss/',
        type: 'RSS',
        baseUrl: 'https://www.vgoroden.ru'
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
function isRussianText(text) {
    if (!text) return false;
    const cyrillicCount = (text.match(/[–∞-—è—ë]/gi) || []).length;
    const totalLetters = (text.match(/[–∞-—è—ëa-z]/gi) || []).length;
    return cyrillicCount > 0 && totalLetters > 0 && (cyrillicCount / totalLetters) > 0.3;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
async function checkNewsRegion(url, sourceId) {
    try {
        const response = await axios.get(url, {
            timeout: 8000,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });

        const html = response.data;

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ù–¢–ê –ü—Ä–∏–≤–æ–ª–∂—å–µ
        if (sourceId === 'nta_pfo') {
            const regionMatch = html.match(/<span class="region">–†–µ–≥–∏–æ–Ω:\s*([^<]+)<\/span>/i);
            if (regionMatch) {
                const region = regionMatch[1].trim();
                console.log(`    –†–µ–≥–∏–æ–Ω –Ω–æ–≤–æ—Å—Ç–∏: ${region}`);
                return region.toLowerCase().includes('–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥') ||
                    region.toLowerCase().includes('–Ω–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è');
            }
            const nnMentions = html.match(/–Ω–∏–∂–Ω(–∏–π|–µ–≥–æ)\s+–Ω–æ–≤–≥–æ—Ä–æ–¥/gi);
            return nnMentions && nnMentions.length > 0;
        }
        return true;

    } catch (error) {
        console.log(`    –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è ${url}:`, error.message);
        return sourceId !== 'nta_pfo';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function extractImageFromUrl(url, sourceId) {
    try {
        const response = await axios.get(url, {
            timeout: 10000,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });

        const html = response.data;
        let imageUrl = null;

        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞
        switch (sourceId) {
            case 'vremyan':
                const vremyanMatch = html.match(/<meta property="og:image" content="([^"]+)"/i) ||
                    html.match(/<img[^>]+class="[^"]*article[^"]*"[^>]+src="([^"]+)"/i);
                if (vremyanMatch) {
                    imageUrl = vremyanMatch[1];
                    if (imageUrl && !imageUrl.startsWith('http')) {
                        imageUrl = 'https://www.vremyan.ru' + imageUrl;
                    }
                }
                break;

            case 'niann':
                const niannMatch = html.match(/<meta property="og:image" content="([^"]+)"/i) ||
                    html.match(/<img[^>]+class="[^"]*news[^"]*"[^>]+src="([^"]+)"/i);
                if (niannMatch) {
                    imageUrl = niannMatch[1];
                    if (imageUrl && !imageUrl.startsWith('http')) {
                        imageUrl = 'https://www.niann.ru' + imageUrl;
                    }
                }
                break;

            case 'nta_pfo':
                const ntaMatch = html.match(/<meta property="og:image" content="([^"]+)"/i) ||
                    html.match(/<img[^>]+class="[^"]*photo[^"]*"[^>]+src="([^"]+)"/i);
                if (ntaMatch) {
                    imageUrl = ntaMatch[1];
                    if (imageUrl && !imageUrl.startsWith('http')) {
                        imageUrl = 'https://nta-pfo.ru' + imageUrl;
                    }
                }
                break;

            case 'vgoroden':
                const vgorodenMatch = html.match(/<meta property="og:image" content="([^"]+)"/i) ||
                    html.match(/<img[^>]+class="[^"]*article[^"]*"[^>]+src="([^"]+)"/i);
                if (vgorodenMatch) {
                    imageUrl = vgorodenMatch[1];
                    if (imageUrl && !imageUrl.startsWith('http')) {
                        imageUrl = 'https://www.vgoroden.ru' + imageUrl;
                    }
                }
                break;
        }

        // Fallback - –∏—â–µ–º og:image
        if (!imageUrl) {
            const ogMatch = html.match(/<meta property="og:image" content="([^"]+)"/i);
            if (ogMatch) {
                imageUrl = ogMatch[1];
            }
        }

        return imageUrl;
    } catch (error) {
        console.log(`    –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${url}:`, error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
async function fetchNews() {
    const allNews = [];

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...');

    for (const source of sources) {
        try {
            console.log(`–ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å ${source.name} (${source.url})...`);

            const possibleUrls = [
                source.url,
                `${source.baseUrl}/rss.xml`,
                `${source.baseUrl}/feed/`,
                `${source.baseUrl}/rss/`,
                `${source.baseUrl}/news.rss`
            ];

            let feedParsed = false;

            for (const tryUrl of possibleUrls) {
                try {
                    console.log(`  –ü—Ä–æ–±—É–µ–º URL: ${tryUrl}`);
                    const feed = await parser.parseURL(tryUrl);

                    console.log(`  ‚úì –£—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ ${feed.items.length} –Ω–æ–≤–æ—Å—Ç–µ–π`);

                    let processedCount = 0;
                    let regionFilteredCount = 0;

                    for (const item of feed.items.slice(0, 20)) {
                        if (!isRussianText(item.title)) {
                            continue;
                        }

                        if (source.id === 'nta_pfo' && item.link) {
                            console.log(`    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω –¥–ª—è: ${item.title.substring(0, 60)}...`);
                            const isNizhnyNovgorod = await checkNewsRegion(item.link, source.id);

                            if (!isNizhnyNovgorod) {
                                regionFilteredCount++;
                                console.log(`    ‚úó –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (–¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω)`);
                                continue;
                            }
                            console.log(`    ‚úì –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥`);
                        }

                        let imageUrl = null;
                        if (item.enclosure && item.enclosure.url) {
                            imageUrl = item.enclosure.url;
                        } else if (item.content) {
                            const imgMatch = item.content.match(/<img[^>]+src="([^"]+)"/i);
                            if (imgMatch) {
                                imageUrl = imgMatch[1];
                            }
                        }

                        if (!imageUrl && item.link) {
                            imageUrl = await extractImageFromUrl(item.link, source.id);
                        }

                        const newsItem = {
                            id: Buffer.from(item.link || `${source.id}_${Date.now()}_${Math.random()}`).toString('base64'),
                            title: item.title || '',
                            description: item.contentSnippet || item.summary || item.content || '',
                            imageUrl: imageUrl,
                            sourceUrl: item.link || '',
                            publishedAt: formatPublishDate(item.pubDate),
                            rawDate: item.pubDate,
                            source: {
                                id: source.id,
                                name: source.name,
                                type: source.type
                            },
                            category: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
                            viewCount: Math.floor(Math.random() * 800) + 100,
                            isLiked: false,
                            platform: 'rss'
                        };

                        allNews.push(newsItem);
                        processedCount++;

                        if (processedCount >= 15) break;
                    }

                    console.log(`  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount} –Ω–æ–≤–æ—Å—Ç–µ–π`);
                    if (regionFilteredCount > 0) {
                        console.log(`  –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ —Ä–µ–≥–∏–æ–Ω—É: ${regionFilteredCount} –Ω–æ–≤–æ—Å—Ç–µ–π`);
                    }

                    feedParsed = true;
                    break;
                } catch (urlError) {
                    console.log(`    ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å: ${urlError.message}`);
                    continue;
                }
            }

            if (!feedParsed) {
                console.log(`  ‚úó –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã –¥–ª—è ${source.name}`);
            }

        } catch (error) {
            console.error(`–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${source.name}:`, error.message);
        }

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    const uniqueNews = allNews.filter((item, index, self) =>
        index === self.findIndex(t => t.sourceUrl === item.sourceUrl)
    );

    uniqueNews.sort((a, b) => new Date(b.rawDate) - new Date(a.rawDate));

    newsCache = uniqueNews.slice(0, 100);
    lastUpdated = new Date();

    console.log(`\n=== –ò–¢–û–ì RSS ===`);
    console.log(`–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${newsCache.length} –Ω–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π`);
    console.log(`–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${newsCache.filter(item => item.imageUrl).length}`);

    const sourceStats = {};
    newsCache.forEach(item => {
        sourceStats[item.source.name] = (sourceStats[item.source.name] || 0) + 1;
    });

    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
    Object.entries(sourceStats).forEach(([name, count]) => {
        console.log(`  ${name}: ${count} –Ω–æ–≤–æ—Å—Ç–µ–π`);
    });
    console.log('===============\n');
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram —Å fallback
async function fetchTelegramNews() {
    console.log(`\n=== TELEGRAM –ü–ê–†–°–ò–ù–ì (${usingBotAPI ? 'Bot API' : 'Web Scraping'}) ===`);

    try {
        if (usingBotAPI) {
            const result = await telegramParser.fetchTelegramNews();

            if (result && result.length > 0) {
                console.log('‚úÖ Bot API –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω');
                return result;
            }

            console.log('‚ö†Ô∏è  Bot API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥...');

            if (!(telegramParser instanceof TelegramParser)) {
                telegramParser = new TelegramParser();
                usingBotAPI = false;
            }
        }

        const result = await telegramParser.fetchTelegramNews();
        return result;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);

        if (usingBotAPI) {
            console.log('üîÑ –ü—ã—Ç–∞–µ–º—Å—è fallback –Ω–∞ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥...');
            try {
                telegramParser = new TelegramParser();
                usingBotAPI = false;
                return await telegramParser.fetchTelegramNews();
            } catch (fallbackError) {
                console.error('‚ùå Fallback —Ç–æ–∂–µ —É–ø–∞–ª:', fallbackError.message);
                return [];
            }
        }

        return [];
    }
}

function formatPublishDate(dateString) {
    if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    const publishDate = new Date(dateString);
    const now = new Date();
    const diffInMinutes = Math.floor((now - publishDate) / (1000 * 60));

    if (diffInMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffInMinutes < 60) return `${diffInMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} —á –Ω–∞–∑–∞–¥`;

    const diffInDays = Math.floor(diffInMinutes / 1440);
    if (diffInDays === 1) return '–≤—á–µ—Ä–∞';
    if (diffInDays < 7) return `${diffInDays} –¥–Ω –Ω–∞–∑–∞–¥`;

    return publishDate.toLocaleDateString('ru-RU');
}

// API Endpoints
app.get('/health', (req, res) => {
    const sourceStats = {};
    newsCache.forEach(item => {
        sourceStats[item.source.name] = (sourceStats[item.source.name] || 0) + 1;
    });

    const telegramStats = telegramParser ? telegramParser.getStats() : { total: 0 };

    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        telegram_mode: usingBotAPI ? 'Bot API' : 'Web Scraping',
        environment: process.env.NODE_ENV || 'development',
        rss: {
            cachedNews: newsCache.length,
            lastUpdated: lastUpdated,
            sources: sourceStats,
            workingSources: Object.keys(sourceStats).length
        },
        telegram: {
            cachedNews: telegramStats.total || 0,
            lastUpdated: telegramStats.lastUpdated,
            channels: telegramStats.channels || {},
            workingChannels: Object.keys(telegramStats.channels || {}).length,
            mode: usingBotAPI ? 'Bot API' : 'Web Scraping'
        }
    });
});

app.get('/api/news/:city', (req, res) => {
    const { city } = req.params;

    if (city === 'nizhny-novgorod' || city === '–Ω–∏–∂–Ω–∏–π-–Ω–æ–≤–≥–æ—Ä–æ–¥') {
        res.json({
            success: true,
            data: newsCache,
            total: newsCache.length,
            city: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
            source: 'rss',
            timestamp: new Date().toISOString()
        });
    } else {
        res.json({
            success: true,
            data: [],
            total: 0,
            city: city,
            message: '–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã',
            timestamp: new Date().toISOString()
        });
    }
});

app.get('/api/telegram/news', (req, res) => {
    const telegramNews = telegramParser ? telegramParser.getCachedNews() : { data: [], total: 0 };
    res.json({
        success: true,
        data: telegramNews.data || [],
        total: telegramNews.total || 0,
        source: 'telegram',
        mode: usingBotAPI ? 'Bot API' : 'Web Scraping',
        timestamp: new Date().toISOString()
    });
});

app.get('/api/telegram/stats', (req, res) => {
    const stats = telegramParser ? telegramParser.getStats() : { total: 0 };
    res.json({
        ...stats,
        mode: usingBotAPI ? 'Bot API' : 'Web Scraping'
    });
});

app.get('/api/news/combined/:city', (req, res) => {
    const { city } = req.params;

    if (city === 'nizhny-novgorod' || city === '–Ω–∏–∂–Ω–∏–π-–Ω–æ–≤–≥–æ—Ä–æ–¥') {
        const rssNews = newsCache;
        const telegramNews = telegramParser ? telegramParser.getCachedNews().data : [];

        const combined = [...rssNews, ...telegramNews]
            .sort((a, b) => new Date(b.rawDate) - new Date(a.rawDate))
            .slice(0, 100);

        res.json({
            success: true,
            data: combined,
            total: combined.length,
            sources: {
                rss: rssNews.length,
                telegram: telegramNews.length
            },
            telegram_mode: usingBotAPI ? 'Bot API' : 'Web Scraping',
            city: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
            timestamp: new Date().toISOString()
        });
    } else {
        res.json({
            success: true,
            data: [],
            total: 0,
            city: city,
            message: '–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã',
            timestamp: new Date().toISOString()
        });
    }
});

app.get('/api/news/stats', (req, res) => {
    const sourceStats = {};
    newsCache.forEach(item => {
        const sourceName = item.source.name;
        sourceStats[sourceName] = (sourceStats[sourceName] || 0) + 1;
    });

    const telegramStats = telegramParser ? telegramParser.getStats() : { total: 0 };

    res.json({
        rss: {
            total: newsCache.length,
            sources: sourceStats,
            lastUpdated: lastUpdated,
            withImages: newsCache.filter(item => item.imageUrl).length,
            city: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
            workingSources: Object.keys(sourceStats).length
        },
        telegram: {
            ...telegramStats,
            mode: usingBotAPI ? 'Bot API' : 'Web Scraping'
        }
    });
});

app.post('/api/telegram/switch-mode', async (req, res) => {
    try {
        await initializeTelegramParsers();
        res.json({
            success: true,
            new_mode: usingBotAPI ? 'Bot API' : 'Web Scraping',
            message: `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${usingBotAPI ? 'Bot API' : '–≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥'}`
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`–û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –ø–∞—Ä—Å–µ—Ä—ã
    await initializeTelegramParsers();

    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞...');

    fetchNews();

    setTimeout(() => {
        fetchTelegramNews();
    }, 5000);

    setInterval(fetchNews, 20 * 60 * 1000);
    setInterval(() => fetchTelegramNews(), 30 * 60 * 1000);
});
